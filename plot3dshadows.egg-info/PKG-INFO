Metadata-Version: 2.4
Name: plot3dshadows
Version: 0.1.0
Summary: A package for 3D plotting with shadows on coordinate planes
Home-page: https://github.com/KabirDabholkar/plot3dshadows
Project-URL: Homepage, https://github.com/yourusername/plot3dshadows
Project-URL: Documentation, https://github.com/yourusername/plot3dshadows#readme
Project-URL: Repository, https://github.com/yourusername/plot3dshadows
Project-URL: Bug Tracker, https://github.com/yourusername/plot3dshadows/issues
Keywords: matplotlib,3d,plotting,visualization,shadows
Requires-Python: >=3.7
Description-Content-Type: text/markdown
Requires-Dist: matplotlib>=3.3.0
Requires-Dist: numpy>=1.19.0
Requires-Dist: seaborn>=0.11.0
Provides-Extra: dev
Requires-Dist: pytest>=6.0; extra == "dev"
Requires-Dist: pytest-cov>=2.0; extra == "dev"
Requires-Dist: black>=21.0; extra == "dev"
Requires-Dist: flake8>=3.8; extra == "dev"
Requires-Dist: isort>=5.0; extra == "dev"
Dynamic: home-page
Dynamic: requires-python

# Plot3DShadows

A Python package for creating beautiful 3D plots with automatic shadows projected onto coordinate planes using matplotlib.

## Features

- **Automatic Shadow Generation**: Automatically projects 3D data onto coordinate planes as shadows
- **Customizable Shadow Planes**: Choose which coordinate planes to show shadows on (xy, xz, yz)
- **Flexible Shadow Positioning**: Control whether shadows appear at the minimum or maximum of each axis
- **Easy Integration**: Simple wrapper around matplotlib's 3D plotting capabilities
- **Customizable Appearance**: Control shadow transparency and other visual properties

## Installation

### From PyPI (when published)
```bash
pip install plot3dshadows
```

### From Source
```bash
git clone https://github.com/yourusername/plot3dshadows.git
cd plot3dshadows
pip install -e .
```

## Quick Start

```python
import matplotlib.pyplot as plt
import numpy as np
from plot3dshadows import Plot3DShadows

# Create a 3D figure
fig = plt.figure(figsize=(10, 8))
ax = fig.add_subplot(111, projection='3d')

# Create the Plot3DShadows object
plotter = Plot3DShadows(
    ax, 
    shadow_alpha_ratio=0.3,
    shadow_planes=['xy', 'xz', 'yz'],
    shadow_positions={'xy': 'min', 'xz': 'min', 'yz': 'min'}
)

# Generate some data
t = np.linspace(0, 4*np.pi, 100)
x = np.cos(t)
y = np.sin(t)
z = t / (4*np.pi)

# Plot with shadows
plotter.plot(x, y, z, color='blue', linewidth=2, label='3D Spiral')
plotter.plot_shadows()  # Add shadows

# Customize the plot
plotter.set_labels('X', 'Y', 'Z')
plotter.set_title('3D Plot with Shadows')
plt.show()
```

## Usage

### Basic Usage

The `Plot3DShadows` class wraps a matplotlib 3D axis and provides methods for plotting with automatic shadows:

```python
from plot3dshadows import Plot3DShadows

# Initialize with a matplotlib 3D axis
plotter = Plot3DShadows(ax)

# Plot data (shadows are stored but not plotted yet)
plotter.plot(x, y, z, color='blue')
plotter.scatter(x, y, z, color='red', s=50)

# Plot all shadows at once
plotter.plot_shadows()
```

### Configuration Options

#### Shadow Planes
Choose which coordinate planes to show shadows on:

```python
# Show shadows on all planes (default)
plotter = Plot3DShadows(ax, shadow_planes=['xy', 'xz', 'yz'])

# Show shadows only on xy and xz planes
plotter = Plot3DShadows(ax, shadow_planes=['xy', 'xz'])
```

#### Shadow Positions
Control whether shadows appear at the minimum or maximum of each axis:

```python
# Shadows at minimum values (default)
plotter = Plot3DShadows(ax, shadow_positions={'xy': 'min', 'xz': 'min', 'yz': 'min'})

# Shadows at maximum values
plotter = Plot3DShadows(ax, shadow_positions={'xy': 'max', 'xz': 'max', 'yz': 'max'})

# Mixed configuration
plotter = Plot3DShadows(ax, shadow_positions={'xy': 'min', 'xz': 'max', 'yz': 'min'})
```

#### Shadow Transparency
Control the transparency of shadows relative to the original plots:

```python
# Shadows at 30% of original alpha (default)
plotter = Plot3DShadows(ax, shadow_alpha_ratio=0.3)

# Shadows at 50% of original alpha
plotter = Plot3DShadows(ax, shadow_alpha_ratio=0.5)
```

### Advanced Features

#### Per-Plot Shadow Control
Override shadow settings for individual plots:

```python
# Use different shadow alpha for this specific plot
plotter.plot(x, y, z, color='blue', shadow_alpha_ratio=0.5)

# Use default shadow alpha for this plot
plotter.scatter(x, y, z, color='red', shadow_alpha_ratio=None)
```

#### Additional Plotting Methods

```python
# Plot coordinate axes
plotter.plot_axes(partial=0.5)  # partial=1 shows full axes

# Plot coordinate planes
plotter.plot_planes()

# Set labels and title
plotter.set_labels('X Axis', 'Y Axis', 'Z Axis')
plotter.set_title('My 3D Plot')

# Update shadow positions dynamically
plotter.set_shadow_positions({'xy': 'max', 'xz': 'min'})
```

## Examples

### Example 1: 3D Spiral with Shadows

```python
import matplotlib.pyplot as plt
import numpy as np
from plot3dshadows import Plot3DShadows

# Setup
fig = plt.figure(figsize=(10, 8))
ax = fig.add_subplot(111, projection='3d')
ax.set_xlim(-2, 2)
ax.set_ylim(-2, 2)
ax.set_zlim(0, 4)

# Create plotter
plotter = Plot3DShadows(ax, shadow_alpha_ratio=0.3)

# Generate spiral data
t = np.linspace(0, 4*np.pi, 100)
x = np.cos(t)
y = np.sin(t)
z = t / (4*np.pi) * 4

# Plot with shadows
plotter.plot(x, y, z, color='blue', linewidth=2)
plotter.plot_shadows()
plotter.set_labels('X', 'Y', 'Z')
plotter.set_title('3D Spiral with Shadows')

plt.show()
```

### Example 2: Scatter Plot with Custom Shadow Configuration

```python
import matplotlib.pyplot as plt
import numpy as np
from plot3dshadows import Plot3DShadows

# Setup
fig = plt.figure(figsize=(10, 8))
ax = fig.add_subplot(111, projection='3d')
ax.set_xlim(-3, 3)
ax.set_ylim(-3, 3)
ax.set_zlim(-3, 3)

# Create plotter with custom shadow configuration
plotter = Plot3DShadows(
    ax, 
    shadow_alpha_ratio=0.2,
    shadow_planes=['xy', 'yz'],  # Only xy and yz shadows
    shadow_positions={'xy': 'min', 'yz': 'max'}  # xy at bottom, yz at back
)

# Generate random data
np.random.seed(42)
n_points = 50
x = np.random.randn(n_points)
y = np.random.randn(n_points)
z = np.random.randn(n_points)

# Plot with shadows
plotter.scatter(x, y, z, color='red', s=50, alpha=0.7)
plotter.plot_shadows()
plotter.plot_axes(partial=0.8)
plotter.set_labels('X', 'Y', 'Z')
plotter.set_title('Scatter Plot with Custom Shadows')

plt.show()
```

## API Reference

### Plot3DShadows

The main class for 3D plotting with shadows.

#### Constructor

```python
Plot3DShadows(ax, shadow_alpha_ratio=0.3, shadow_planes=['xy', 'xz', 'yz'], 
              shadow_positions={'xy': 'min', 'xz': 'min', 'yz': 'min'})
```

**Parameters:**
- `ax`: matplotlib.axes.Axes3D - The 3D matplotlib axis object
- `shadow_alpha_ratio`: float - Ratio to multiply original alpha by for shadows (default: 0.3)
- `shadow_planes`: list - List of shadow planes to plot (default: ['xy', 'xz', 'yz'])
- `shadow_positions`: dict - Shadow positions for each plane (default: {'xy': 'min', 'xz': 'min', 'yz': 'min'})

#### Methods

- `plot(x, y, z, shadow_alpha_ratio=None, **kwargs)`: Plot 3D lines
- `scatter(x, y, z, shadow_alpha_ratio=None, **kwargs)`: Plot 3D scatter points
- `plot_shadows()`: Plot shadows for all accumulated data
- `set_labels(xlabel, ylabel, zlabel)`: Set axis labels
- `set_title(title)`: Set plot title
- `set_shadow_positions(shadow_positions)`: Update shadow positions
- `plot_axes(partial=1)`: Plot coordinate axes
- `plot_planes()`: Plot coordinate planes

## Contributing

Contributions are welcome! Please feel free to submit a Pull Request.

## License

This project is licensed under the MIT License - see the LICENSE file for details.

## Acknowledgments

- Built on top of matplotlib's excellent 3D plotting capabilities
- Inspired by the need for better 3D visualization with depth cues 
